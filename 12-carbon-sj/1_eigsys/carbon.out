#INFO: **** input file is 12-carbon-sj/1_eigsys/carbon.py ****
#!/usr/bin/env python
def atom_text(elem,pos):
    assert len(elem) == len(pos)
    lines = []
    for iatom in range(len(elem)):
        mypos = pos[iatom]
        line = '%5s  %10.6f  %10.6f  %10.6f' % (elem[iatom],mypos[0],mypos[1],mypos[2])
        lines.append(line)
    atext = ';\n'.join(lines)
    return atext
# end def

import os
import numpy as np
import pyscf.gto.basis as bas
from pyscf.pbc import gto,scf
from pyscf.pbc.scf import RHF
from pyscf import lib

# !!!! hard-code basis and pseudo to avoid mistakes in later folders
def build_carbon_cell():#basis={'C':'gth-szv'},pseudo={'C':'gth-pade'}):
  #basis = {'C':'bfd-vdz'} # too many diffused functions
  basis={ # truncated basis set from Lucas
  'C':bas.parse('''
  C s
    0.205100 0.397529 
    0.409924 0.380369 
    0.819297 0.180113 
    1.637494 -0.033512 
    3.272791 -0.121499 
    6.541187 0.015176 
    13.073594 -0.000705 
   C p
    0.234064 0.302667 
    0.468003 0.289868 
    0.935757 0.210979 
    1.871016 0.112024 
    3.741035 0.054425 
    7.480076 0.021931 
   C d
    0.329486 1.000000 
   C f
    0.773485 1.000000 
   C s
  0.2 1.0
   C s
  0.6 1.0
   C p
  0.2 1.0
   C p
  0.6 1.0
  '''),
  }
  pseudo = {'C':'bfd'}
  alat0 = 3.6 # angstrom
  axes  = (np.ones((3,3))-np.eye(3))*alat0/2.0
  elem  = ['C','C']
  pos   = np.array([[0,0,0],[0.25,0.25,0.25]])*alat0
  atoms = atom_text(elem,pos)
  #basis = 'gth-szv'
  #pseudo= 'gth-pade'

  cell = gto.M(verbose=4,a=axes,
    gs=[4,4,4],atom=atoms,basis=basis,pseudo=pseudo)
  cell.charge=0
  return cell
# end def build_carbon_cell

def run_carbon(chkfile_name='vdz.h5'):
  cell = build_carbon_cell()
  mf = RHF(cell,exxdiv=None)
  mf.max_cycle=50
  mf.chkfile=chkfile_name
  mf.conv_tol=1e-07
  mf.diis_start_cycle=1

  # run or load
  if os.path.isfile(chkfile_name):
    mf.__dict__.update(lib.chkfile.load(chkfile_name,'scf'))
  else:
    mf.kernel()
  return mf
# end def run_carbon

def ao_on_grid(mf):
  from pyscf.pbc.dft import gen_grid,numint
  coords = gen_grid.gen_uniform_grids(mf.cell)
  aoR    = numint.eval_ao(mf.cell,coords)
  return aoR
# end def ao_on_grid

def mo_coeff_to_psig(mo_coeff,aoR,cell_gs,cell_vol,int_gvecs=None):
  """
   Inputs:
     mo_coeff: molecular orbital in AO basis, each column is an MO, shape (nao,nmo)
     aoR: atomic orbitals on a real-space grid, each column is an AO, shape (ngrid,nao)
     cell_gs: 2*cell_gs+1 should be the shape of real-space grid (e.g. (5,5,5))
     cell_vol: cell volume, used for FFT normalization
     int_gvecs: specify the order of plane-waves using reciprocal lattice points
   Outputs:
       3. plane-wave coefficients representing the MOs, shape (ngrid,nmo)
  """
  # provide the order of reciprocal lattice vectors to skip
  if int_gvecs is None: # use internal order
    nx,ny,nz = cell_gs
    from itertools import product
    int_gvecs = np.array([gvec for gvec in product(
      range(-nx,nx+1),range(-ny,ny+1),range(-nz,nz+1))])
  # end if
  npw = len(int_gvecs) # number of plane waves 

  # put molecular orbitals on real-space grid
  moR = np.dot(aoR,mo_coeff) 
  nao,nmo = moR.shape
  rgrid_shape = 2*np.array(cell_gs)+1
  assert nao == np.prod(rgrid_shape)

  # sort MOs from lowest to highest energy
  # for each MO, FFT to get psig
  psig = np.zeros([nmo,npw,2]) # store real & complex
  for istate in range(nmo):
    # fill real-space FFT grid
    rgrid = moR[:,istate].reshape(rgrid_shape)
    # get plane-wave coefficients (on reciprocal-space FFT grid)
    moG   = np.fft.fftn(rgrid)/np.prod(rgrid_shape)*cell_vol
    # transfer plane-wave coefficients to psig in specified order
    for igvec in range(npw):
      comp_val = moG[tuple(int_gvecs[igvec])]
      psig[istate,igvec,:] = comp_val.real,comp_val.imag
    # end for igvec
  # end for istate
  return int_gvecs,psig
# end def mo_coeff_to_psig

if __name__ == '__main__':

  # run DFT
  mf = run_carbon()

  # put AO on real-space grid
  aoR = ao_on_grid(mf)
  
  # put MOs in file for PwscfH5 to read
  import pandas as pd
  gfile = 'gvectors.dat'
  fname = 'eigensystem.json'
  if os.path.isfile(fname):
    gvecs = np.loadtxt(gfile)
    eig_df = pd.read_json(fname).set_index(
      ['ikpt','ispin','istate'],drop=True).sort_index()
  else:
    data = []
    ikpt  = 0 # gamma-point calculation
    ispin = 0 # restricted (same orbitals for up and down electrons)
    # get MOs in plane-wave basis
    gvecs,psig = mo_coeff_to_psig(mf.mo_coeff,aoR,mf.cell.gs,mf.cell.vol)
    nstate,npw,ncomp = psig.shape
    for istate in range(nstate):
      entry = {'ikpt':ikpt,'ispin':ispin,'istate':istate,
        'reduced_k':mf.kpt,'evalue':mf.mo_energy[istate],'evector':psig[istate,:,:]}
      data.append(entry)
    # end for istate
    eig_df = pd.DataFrame(data)
    eig_df.to_json(fname)
    np.savetxt(gfile,gvecs)
  # end if
  """
  c = mf.mo_coeff
  nmo = c.shape[1]
  h1e = reduce(np.dot, (c.T, mf.get_hcore(), c)) # 1-electron integrals
  eri = mf.with_df.ao2mo(c) # 2-electron integrals
  eri = ao2mo.restore('s8',eri,nmo) # use 8-fold symmetry of integrals of real orbitals [ij|kl] = [kj|il\ etc.
  tools.fcidump.from_integrals('fcidump.dat', 
    h1e, eri, nmo, cell.nelectron,nuc=cell.energy_nuc(), ms=0)
  """

# end __main__
#INFO: ******************** input file end ********************


System: ('Linux', 'kylin.physics.illinois.edu', '4.7.7-200.fc24.x86_64', '#1 SMP Sat Oct 8 00:21:59 UTC 2016', 'x86_64', 'x86_64')  Threads 24
Python 2.7.12 (default, Sep 29 2016, 13:30:34) 
[GCC 6.2.1 20160916 (Red Hat 6.2.1-2)]
numpy 1.12.1  scipy 0.19.0
Date: Tue Jun 20 11:34:17 2017
PySCF version 1.4a
[INPUT] VERBOSE 4
[INPUT] num atoms = 2
[INPUT] num electrons = 8
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT]  1 C      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 C      0.900000000000   0.900000000000   0.900000000000 AA    1.700753512109   1.700753512109   1.700753512109 Bohr
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] C
[INPUT] 0    0    [7    /1   ]  0.2051            0.397529
                                0.409924          0.380369
                                0.819297          0.180113
                                1.637494          -0.033512
                                3.272791          -0.121499
                                6.541187          0.015176
                                13.073594         -0.000705
[INPUT] 0    0    [1    /1   ]  0.2                  1
[INPUT] 0    0    [1    /1   ]  0.6                  1
[INPUT] 1    0    [6    /1   ]  0.234064          0.302667
                                0.468003          0.289868
                                0.935757          0.210979
                                1.871016          0.112024
                                3.741035          0.054425
                                7.480076          0.021931
[INPUT] 1    0    [1    /1   ]  0.2                  1
[INPUT] 1    0    [1    /1   ]  0.6                  1
[INPUT] 2    0    [1    /1   ]  0.329486             1
[INPUT] 3    0    [1    /1   ]  0.773485             1
nuclear repulsion = -12.6692033990629
number of shells = 16
number of NR pGTOs = 90
number of NR cGTOs = 48
basis = {'C': [[0, [0.2051, 0.397529], [0.409924, 0.380369], [0.819297, 0.180113], [1.637494, -0.033512], [3.272791, -0.121499], [6.541187, 0.015176], [13.073594, -0.000705]], [0, [0.2, 1.0]], [0, [0.6, 1.0]], [1, [0.234064, 0.302667], [0.468003, 0.289868], [0.935757, 0.210979], [1.871016, 0.112024], [3.741035, 0.054425], [7.480076, 0.021931]], [1, [0.2, 1.0]], [1, [0.6, 1.0]], [2, [0.329486, 1.0]], [3, [0.773485, 1.0]]]}
ecp = {'C': 'bfd'}
CPU time:         2.41
lattice vectors  a1 [0.000000000, 3.401507024, 3.401507024]
                 a2 [3.401507024, 0.000000000, 3.401507024]
                 a3 [3.401507024, 3.401507024, 0.000000000]
dimension = 3
Cell volume = 78.7126
rcut = 15.1005653466 (nimgs = [4 4 4])
lattice sum = 527 cells
precision = 1e-08
pseudo = {}
gs (FFT-mesh) = [4, 4, 4]
    = ke_cutoff [ 20.4723757  20.4723757  20.4723757]
ew_eta = 0.644226
ew_cut = 9.42171232094 (nimgs = [3 3 3])


******** <class 'pyscf.pbc.scf.hf.RHF'> flags ********
method = RHF
initial guess = minao
damping factor = 0
level shift factor = 0
DIIS = <pyscf.scf.diis.CDIIS object at 0x7faf88700250>
DIIS start cycle = 1
DIIS space = 8
SCF tol = 1e-07
SCF gradient tol = None
max. SCF cycles = 50
direct_scf = False
chkfile to save SCF result = vdz.h5
max_memory 4000 MB (current use 64 MB)
******** PBC SCF flags ********
kpt = [ 0.  0.  0.]
DF object = <pyscf.pbc.df.fft.FFTDF object at 0x7fafd1f5fa10>
Exchange divergence treatment (exxdiv) = None
Set gradient conv threshold to 0.000316228
init E= -8.8181075980239
  HOMO = 0.706545632424976  LUMO = 0.897492383467197
cycle= 1 E= -7.49184911631472  delta_E= 1.33  |g|= 0.914  |ddm|= 19.5
  HOMO = 0.88772542539576  LUMO = 1.08212471186373
cycle= 2 E= -6.52843759053196  delta_E= 0.963  |g|= 1.69  |ddm|= 6.25
  HOMO = 0.929218388898127  LUMO = 1.04915633426424
cycle= 3 E= -7.61482429386616  delta_E= -1.09  |g|= 0.442  |ddm|=  5.8
  HOMO = 0.916257983866679  LUMO = 1.03250662840221
cycle= 4 E= -7.66451548723059  delta_E= -0.0497  |g|= 0.195  |ddm|= 0.73
  HOMO = 0.922898195452666  LUMO = 1.03005014681188
cycle= 5 E= -7.67523959704439  delta_E= -0.0107  |g|= 0.00901  |ddm|= 0.392
  HOMO = 0.921783716649189  LUMO = 1.02969646324012
cycle= 6 E= -7.67526009601393  delta_E= -2.05e-05  |g|= 0.00359  |ddm|= 0.0636
  HOMO = 0.921605064449537  LUMO = 1.02960954612589
cycle= 7 E= -7.67526323032724  delta_E= -3.13e-06  |g|= 0.00155  |ddm|= 0.0144
  HOMO = 0.921627479750668  LUMO = 1.02960066200833
cycle= 8 E= -7.67526390928337  delta_E= -6.79e-07  |g|= 0.00018  |ddm|= 0.00427
  HOMO = 0.921632470079942  LUMO = 1.02960364191892
cycle= 9 E= -7.6752639190804  delta_E= -9.8e-09  |g|= 1.12e-05  |ddm|= 0.000415
  HOMO = 0.92163254193039  LUMO = 1.0296030748078
converged SCF energy = -7.6752639190804
